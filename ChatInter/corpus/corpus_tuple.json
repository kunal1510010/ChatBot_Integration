{"categories": "basic python", "sub categories": "tuple", "conversations": {"tuple": ["A tuple is a collection which is ordered and unchangeable. In Python tuples are written with round brackets.", "A tuple is a sequence of immutable Python objects."], "cana hold tuple type value": ["Tuples can hold both homogeneous as well as heterogeneous values. However, remember that once you declared those values, you cannot change them"], "difference list tuple": ["Two basic difference are, tuples store a fixed set of elements and don’t allow changes whereas the list has the provision to update its content.", "The list uses square brackets for opening and closing whereas, and a tuple has got parentheses for the enclosure.", "The main difference between lists and a tuples is the fact that lists are mutable whereas tuples are immutable. A mutable data type means that a python object of this type can be modified. An immutable object can’t.", "In someways a tuple is similar to a list in terms of indexing, nested objects and repetition but a tuple is immutable unlike lists which are mutable.", "The differences between tuples and lists are, the tuples cannot be changed unlike lists and tuples use parentheses, whereas lists use square brackets."], "  create tuple": ["tup = ()"], "instantiate python tuple": ["Tuples are initialized with () brackets rather than [] brackets as with lists.", "You can create a tuple by placing a sequence of desired elements separated using commas inside a pair of round brackets (), i.e., parentheses. Please note that you can create a tuple even without using the parentheses. Also, the elements of a tuple can be of any valid Python data types ranging from numbers, strings, lists, etc."], "access particular tuple value": ["To access values in tuple, use the square brackets for slicing along with the index or indices to obtain value available at that index.", "1. Via Indexing->The simplest is the direct access method where you use the index operator [] to pick an item from the tuple.  2.Via Reverse Indexing ->Python tuple supports reverse indexing, i.e., accessing elements using the (-ve) index values. 3. Via Slicing Operator->If you need to access not one but more than one element from a tuple, then Python’s slicing operator can come to use."], "/ modify python tuple update": ["Since tuples are immutable, so it seems no way to modify them."], "membership python test tuple": ["The “in” keyword will help us exercise the membership test on a tuple. For Eg., print( 'p' in py_tuple)", "You can also use the in operator to check if an element exists in the tuple"], "python traverse tuple": ["You can form a for loop and one by one access all the elements in a tuple."], "delete tuple": ["Removing individual tuple elements is not possible. To explicitly remove an entire tuple, just use the del statement i.e. del tup"], "basic operation tuple": ["Tuples respond to the + and * operators much like strings; they mean concatenation and repetition here too, except that the result is a new tuple, not a string."], "count element number tuple": ["With the len() function, you can return the length of the tuple"], "sort tuple": ["To return a tuple with the elements in an sorted order, use sorted()"], "change data tuple type": ["Use tuple() to converts a data type to tuple. For example, in the code chunk below, you convert a Python list to a tuple."], "change tuple value": ["No, Once a tuple is created, you cannot change its values. Tuples are unchangeable."], "check length tuple": ["To determine how many items a tuple has, use the len() method"], "add item new tuple": ["You cannot add elements to a tuple because of their immutable property. There is no append() or extend() method for tuples", "Once a tuple is created, you cannot add items to it. Tuples are unchangeable."], "element remove tuple": ["You cannot remove elements from a tuple, also because of their immutability, Tuples have no remove() or pop() method"], "method tuple": ["count() returns the number of times a specified value occurs in a tuple, and index() searches the tuple for a specified value and returns the position of where it was found"], "mutable python tuple": ["Tuples are not mutable.You can create another copy of a tuple with additions or deletions, then assign it to the same variable, but that’d be another tuple, rather than the one that was created before."], "immutable tuple use": ["Well, not only do they provide read-only access to the data values but they are also faster than lists, So we use tuples."], "? Python case need programming tuple tuple use useful": ["On a purely pragmatic, Python-only level, tuples provide little benefit over lists other than being more space efficient and also providing assurance that values cannot be changed (not usually a big deal in small programs, but that guarantee is helpful in large codebases). Tuples are also the fastest type to instantiate, particularly in the case of tuple literals."], "Python faster list tuple": ["In Python tuples are immutable but list are mutable. Tuples are identified by python interpreter as one immutable constant literal, and hence is built as 1 single entity and stored in hashtable and are fetched when some execution is done on them. Whereas list are mutable object, so each time some execution is done new objects are created hence arent interpreted just once and hence lists are slower than tuple."], "advantage list tuple": ["Tuples are preffered over lists because they are faster than lists, they can be dictionary keys or values in a set however lists cannot, hence tuples can be said as hashable."], "Python list prefer tuple": ["Tuples are preffered over lists because they are faster than lists, the can be dictionary keys or values in a set however lists cannot."], "immutability python string tuple use": ["According to the official Python documentation, immutable is an object with a fixed value, but value is a rather vague term, the correct term for tuples would be id. id is the identity of the location of an object in memory.", "Immutable objects can be hashed. You can make them the keys of a python dictionary. This is the most important reason several things are left immutable, and is of monumental importance (where would we be without the python dict!)"]}}